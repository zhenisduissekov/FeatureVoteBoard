import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';

// English translations
const enTranslations = {
  header: {
    title: 'FeatureVote',
    addFeature: 'Add Feature',
    language: 'Language'
  },
  hero: {
    title: 'Build <highlight>better features</highlight> from user feedback',
    subtitle: 'Drive your product\'s growth with clarity by letting users vote on the features they want. üöÄ',
    ideasBoard: 'Ideas Board',
    sortBy: 'Sort by',
    filterBy: 'Filter by'
  },
  featureStatus: {
    pending: 'Pending',
    'in-progress': 'In Progress',
    approved: 'Approved',
    done: 'Done',
    canceled: 'Canceled',
    all: 'All Statuses'
  },
  sortOptions: {
    'most-voted': 'Most Voted',
    newest: 'Newest',
    oldest: 'Oldest'
  },
  featureList: {
    noFeatures: 'No features found',
    beFirst: 'Be the first to suggest a feature!',
    submitted: 'Submitted'
  },
  addFeatureModal: {
    title: 'Submit new feature idea',
    featureTitle: 'Title',
    titleRequired: 'Title *',
    descriptionOptional: 'Description (optional)',
    titlePlaceholder: 'What feature would you like to see?',
    descriptionPlaceholder: 'Provide more details about your idea...',
    cancel: 'Cancel',
    submit: 'Submit idea',
    titleError: 'Please enter a title (minimum 3 characters)'
  },
  voting: {
    alreadyVoted: 'Already Voted',
    voteSuccess: 'Vote Submitted',
    voteRecorded: 'Your vote has been recorded.'
  },
  footer: {
    copyright: '¬© 2023 FeatureVote. All rights reserved.',
    educational: 'Built for educational purposes only.'
  },
  toasts: {
    success: 'Success!',
    featureSubmitted: 'Your feature idea has been submitted.',
    error: 'Error'
  }
};

// Russian translations
const ruTranslations = {
  header: {
    title: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ñ—É–Ω–∫—Ü–∏—é',
    addFeature: '–î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é',
    language: '–Ø–∑—ã–∫'
  },
  hero: {
    title: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ <highlight>–ª—É—á—à–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏</highlight> –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    subtitle: '–£—Å–∫–æ—Ä—å—Ç–µ —Ä–æ—Å—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ–∑–≤–æ–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. üöÄ',
    ideasBoard: '–î–æ—Å–∫–∞ –∏–¥–µ–π',
    sortBy: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ',
    filterBy: '–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ'
  },
  featureStatus: {
    pending: '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
    'in-progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
    approved: '–û–¥–æ–±—Ä–µ–Ω–æ',
    done: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
    canceled: '–û—Ç–º–µ–Ω–µ–Ω–æ',
    all: '–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã'
  },
  sortOptions: {
    'most-voted': '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ',
    newest: '–ù–æ–≤—ã–µ',
    oldest: '–°—Ç–∞—Ä—ã–µ'
  },
  featureList: {
    noFeatures: '–§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
    beFirst: '–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é!',
    submitted: '–î–æ–±–∞–≤–ª–µ–Ω–æ'
  },
  addFeatureModal: {
    title: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é –∏–¥–µ—é —Ñ—É–Ω–∫—Ü–∏–∏',
    featureTitle: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
    titleRequired: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ *',
    descriptionOptional: '–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
    titlePlaceholder: '–ö–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å?',
    descriptionPlaceholder: '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ –≤–∞—à–µ–π –∏–¥–µ–µ...',
    cancel: '–û—Ç–º–µ–Ω–∞',
    submit: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ—é',
    titleError: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)'
  },
  voting: {
    alreadyVoted: '–£–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏',
    voteSuccess: '–ì–æ–ª–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
    voteRecorded: '–í–∞—à –≥–æ–ª–æ—Å –∑–∞–ø–∏—Å–∞–Ω.'
  },
  footer: {
    copyright: '¬© 2023 –ì–æ–ª–æ—Å–§—É–Ω–∫—Ü–∏–π. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.',
    educational: '–°–æ–∑–¥–∞–Ω–æ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö.'
  },
  toasts: {
    success: '–£—Å–ø–µ—Ö!',
    featureSubmitted: '–í–∞—à–∞ –∏–¥–µ—è —Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.',
    error: '–û—à–∏–±–∫–∞'
  }
};

i18n
  // detect user language
  .use(LanguageDetector)
  // pass the i18n instance to react-i18next
  .use(initReactI18next)
  // init i18next
  .init({
    resources: {
      en: {
        translation: enTranslations
      },
      ru: {
        translation: ruTranslations
      }
    },
    fallbackLng: 'en',
    debug: false,
    interpolation: {
      escapeValue: false // not needed for react as it escapes by default
    }
  });

export default i18n;